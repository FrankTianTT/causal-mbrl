name: constraint_based_dynamics

multi_step: ${task.multi_step}

transition:
  _target_: cmrl.models.transition.ExternalMaskEnsembleGaussianTransition
  # transition info
  obs_size: ???
  action_size: ???
  deterministic: false
  # algorithm parameters
  ensemble_num: ${task.ensemble_num}
  elite_num: ${task.elite_num}
  residual: true
  learn_logvar_bounds: false  # so far this works better
  # network parameters
  num_layers: 4
  hid_size: 200
  activation_fn_cfg:
    _target_: torch.nn.SiLU
  # others
  device: ${device}

learned_reward: ${task.learning_reward}
reward_mech:
  _target_: cmrl.models.BaseRewardMech
  # transition info
  obs_size: ???
  action_size: ???
  deterministic: false
  # algorithm parameters
  learn_logvar_bounds: false  # so far this works better
  ensemble_num: ${task.ensemble_num}
  elite_num: ${task.elite_num}
  # network parameters
  num_layers: 4
  hid_size: 200
  activation_fn_cfg:
    _target_: torch.nn.SiLU
  # others
  device: ${device}

learned_termination: ${task.learning_terminal}
termination_mech:
  _target_: cmrl.models.BaseTerminationMech
  # transition info
  obs_size: ???
  action_size: ???
  deterministic: false

optim_lr: ${task.optim_lr}
weight_decay: ${task.weight_decay}
patience: ${task.patience}
batch_size: ${task.batch_size}
validation_ratio: ${task.validation_ratio}
shuffle_each_epoch: ${task.shuffle_each_epoch}
bootstrap_permutes: ${task.bootstrap_permutes}
longest_epoch: ${task.longest_epoch}
improvement_threshold: ${task.improvement_threshold}

normalize: true
normalize_double_precision: true
